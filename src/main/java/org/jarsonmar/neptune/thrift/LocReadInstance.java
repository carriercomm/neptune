/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.jarsonmar.neptune.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LocReadInstance implements org.apache.thrift.TBase<LocReadInstance, LocReadInstance._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LocReadInstance");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MOBS_FIELD_DESC = new org.apache.thrift.protocol.TField("mobs", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField PLRS_FIELD_DESC = new org.apache.thrift.protocol.TField("plrs", org.apache.thrift.protocol.TType.SET, (short)3);
  private static final org.apache.thrift.protocol.TField OBJS_FIELD_DESC = new org.apache.thrift.protocol.TField("objs", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField EXITS_FIELD_DESC = new org.apache.thrift.protocol.TField("exits", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField PROPS_FIELD_DESC = new org.apache.thrift.protocol.TField("props", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.SET, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LocReadInstanceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LocReadInstanceTupleSchemeFactory());
  }

  public String id; // required
  public Set<String> mobs; // required
  public Set<String> plrs; // required
  public Set<String> objs; // required
  public Map<ExitProp,String> exits; // required
  public Map<String,String> props; // required
  public Set<String> flags; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    MOBS((short)2, "mobs"),
    PLRS((short)3, "plrs"),
    OBJS((short)4, "objs"),
    EXITS((short)5, "exits"),
    PROPS((short)6, "props"),
    FLAGS((short)7, "flags");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // MOBS
          return MOBS;
        case 3: // PLRS
          return PLRS;
        case 4: // OBJS
          return OBJS;
        case 5: // EXITS
          return EXITS;
        case 6: // PROPS
          return PROPS;
        case 7: // FLAGS
          return FLAGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBS, new org.apache.thrift.meta_data.FieldMetaData("mobs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PLRS, new org.apache.thrift.meta_data.FieldMetaData("plrs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.OBJS, new org.apache.thrift.meta_data.FieldMetaData("objs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.EXITS, new org.apache.thrift.meta_data.FieldMetaData("exits", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ExitProp.class), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PROPS, new org.apache.thrift.meta_data.FieldMetaData("props", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LocReadInstance.class, metaDataMap);
  }

  public LocReadInstance() {
  }

  public LocReadInstance(
    String id,
    Set<String> mobs,
    Set<String> plrs,
    Set<String> objs,
    Map<ExitProp,String> exits,
    Map<String,String> props,
    Set<String> flags)
  {
    this();
    this.id = id;
    this.mobs = mobs;
    this.plrs = plrs;
    this.objs = objs;
    this.exits = exits;
    this.props = props;
    this.flags = flags;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LocReadInstance(LocReadInstance other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetMobs()) {
      Set<String> __this__mobs = new HashSet<String>();
      for (String other_element : other.mobs) {
        __this__mobs.add(other_element);
      }
      this.mobs = __this__mobs;
    }
    if (other.isSetPlrs()) {
      Set<String> __this__plrs = new HashSet<String>();
      for (String other_element : other.plrs) {
        __this__plrs.add(other_element);
      }
      this.plrs = __this__plrs;
    }
    if (other.isSetObjs()) {
      Set<String> __this__objs = new HashSet<String>();
      for (String other_element : other.objs) {
        __this__objs.add(other_element);
      }
      this.objs = __this__objs;
    }
    if (other.isSetExits()) {
      Map<ExitProp,String> __this__exits = new HashMap<ExitProp,String>();
      for (Map.Entry<ExitProp, String> other_element : other.exits.entrySet()) {

        ExitProp other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        ExitProp __this__exits_copy_key = other_element_key;

        String __this__exits_copy_value = other_element_value;

        __this__exits.put(__this__exits_copy_key, __this__exits_copy_value);
      }
      this.exits = __this__exits;
    }
    if (other.isSetProps()) {
      Map<String,String> __this__props = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.props.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__props_copy_key = other_element_key;

        String __this__props_copy_value = other_element_value;

        __this__props.put(__this__props_copy_key, __this__props_copy_value);
      }
      this.props = __this__props;
    }
    if (other.isSetFlags()) {
      Set<String> __this__flags = new HashSet<String>();
      for (String other_element : other.flags) {
        __this__flags.add(other_element);
      }
      this.flags = __this__flags;
    }
  }

  public LocReadInstance deepCopy() {
    return new LocReadInstance(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.mobs = null;
    this.plrs = null;
    this.objs = null;
    this.exits = null;
    this.props = null;
    this.flags = null;
  }

  public String getId() {
    return this.id;
  }

  public LocReadInstance setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getMobsSize() {
    return (this.mobs == null) ? 0 : this.mobs.size();
  }

  public java.util.Iterator<String> getMobsIterator() {
    return (this.mobs == null) ? null : this.mobs.iterator();
  }

  public void addToMobs(String elem) {
    if (this.mobs == null) {
      this.mobs = new HashSet<String>();
    }
    this.mobs.add(elem);
  }

  public Set<String> getMobs() {
    return this.mobs;
  }

  public LocReadInstance setMobs(Set<String> mobs) {
    this.mobs = mobs;
    return this;
  }

  public void unsetMobs() {
    this.mobs = null;
  }

  /** Returns true if field mobs is set (has been assigned a value) and false otherwise */
  public boolean isSetMobs() {
    return this.mobs != null;
  }

  public void setMobsIsSet(boolean value) {
    if (!value) {
      this.mobs = null;
    }
  }

  public int getPlrsSize() {
    return (this.plrs == null) ? 0 : this.plrs.size();
  }

  public java.util.Iterator<String> getPlrsIterator() {
    return (this.plrs == null) ? null : this.plrs.iterator();
  }

  public void addToPlrs(String elem) {
    if (this.plrs == null) {
      this.plrs = new HashSet<String>();
    }
    this.plrs.add(elem);
  }

  public Set<String> getPlrs() {
    return this.plrs;
  }

  public LocReadInstance setPlrs(Set<String> plrs) {
    this.plrs = plrs;
    return this;
  }

  public void unsetPlrs() {
    this.plrs = null;
  }

  /** Returns true if field plrs is set (has been assigned a value) and false otherwise */
  public boolean isSetPlrs() {
    return this.plrs != null;
  }

  public void setPlrsIsSet(boolean value) {
    if (!value) {
      this.plrs = null;
    }
  }

  public int getObjsSize() {
    return (this.objs == null) ? 0 : this.objs.size();
  }

  public java.util.Iterator<String> getObjsIterator() {
    return (this.objs == null) ? null : this.objs.iterator();
  }

  public void addToObjs(String elem) {
    if (this.objs == null) {
      this.objs = new HashSet<String>();
    }
    this.objs.add(elem);
  }

  public Set<String> getObjs() {
    return this.objs;
  }

  public LocReadInstance setObjs(Set<String> objs) {
    this.objs = objs;
    return this;
  }

  public void unsetObjs() {
    this.objs = null;
  }

  /** Returns true if field objs is set (has been assigned a value) and false otherwise */
  public boolean isSetObjs() {
    return this.objs != null;
  }

  public void setObjsIsSet(boolean value) {
    if (!value) {
      this.objs = null;
    }
  }

  public int getExitsSize() {
    return (this.exits == null) ? 0 : this.exits.size();
  }

  public void putToExits(ExitProp key, String val) {
    if (this.exits == null) {
      this.exits = new HashMap<ExitProp,String>();
    }
    this.exits.put(key, val);
  }

  public Map<ExitProp,String> getExits() {
    return this.exits;
  }

  public LocReadInstance setExits(Map<ExitProp,String> exits) {
    this.exits = exits;
    return this;
  }

  public void unsetExits() {
    this.exits = null;
  }

  /** Returns true if field exits is set (has been assigned a value) and false otherwise */
  public boolean isSetExits() {
    return this.exits != null;
  }

  public void setExitsIsSet(boolean value) {
    if (!value) {
      this.exits = null;
    }
  }

  public int getPropsSize() {
    return (this.props == null) ? 0 : this.props.size();
  }

  public void putToProps(String key, String val) {
    if (this.props == null) {
      this.props = new HashMap<String,String>();
    }
    this.props.put(key, val);
  }

  public Map<String,String> getProps() {
    return this.props;
  }

  public LocReadInstance setProps(Map<String,String> props) {
    this.props = props;
    return this;
  }

  public void unsetProps() {
    this.props = null;
  }

  /** Returns true if field props is set (has been assigned a value) and false otherwise */
  public boolean isSetProps() {
    return this.props != null;
  }

  public void setPropsIsSet(boolean value) {
    if (!value) {
      this.props = null;
    }
  }

  public int getFlagsSize() {
    return (this.flags == null) ? 0 : this.flags.size();
  }

  public java.util.Iterator<String> getFlagsIterator() {
    return (this.flags == null) ? null : this.flags.iterator();
  }

  public void addToFlags(String elem) {
    if (this.flags == null) {
      this.flags = new HashSet<String>();
    }
    this.flags.add(elem);
  }

  public Set<String> getFlags() {
    return this.flags;
  }

  public LocReadInstance setFlags(Set<String> flags) {
    this.flags = flags;
    return this;
  }

  public void unsetFlags() {
    this.flags = null;
  }

  /** Returns true if field flags is set (has been assigned a value) and false otherwise */
  public boolean isSetFlags() {
    return this.flags != null;
  }

  public void setFlagsIsSet(boolean value) {
    if (!value) {
      this.flags = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case MOBS:
      if (value == null) {
        unsetMobs();
      } else {
        setMobs((Set<String>)value);
      }
      break;

    case PLRS:
      if (value == null) {
        unsetPlrs();
      } else {
        setPlrs((Set<String>)value);
      }
      break;

    case OBJS:
      if (value == null) {
        unsetObjs();
      } else {
        setObjs((Set<String>)value);
      }
      break;

    case EXITS:
      if (value == null) {
        unsetExits();
      } else {
        setExits((Map<ExitProp,String>)value);
      }
      break;

    case PROPS:
      if (value == null) {
        unsetProps();
      } else {
        setProps((Map<String,String>)value);
      }
      break;

    case FLAGS:
      if (value == null) {
        unsetFlags();
      } else {
        setFlags((Set<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case MOBS:
      return getMobs();

    case PLRS:
      return getPlrs();

    case OBJS:
      return getObjs();

    case EXITS:
      return getExits();

    case PROPS:
      return getProps();

    case FLAGS:
      return getFlags();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case MOBS:
      return isSetMobs();
    case PLRS:
      return isSetPlrs();
    case OBJS:
      return isSetObjs();
    case EXITS:
      return isSetExits();
    case PROPS:
      return isSetProps();
    case FLAGS:
      return isSetFlags();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LocReadInstance)
      return this.equals((LocReadInstance)that);
    return false;
  }

  public boolean equals(LocReadInstance that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_mobs = true && this.isSetMobs();
    boolean that_present_mobs = true && that.isSetMobs();
    if (this_present_mobs || that_present_mobs) {
      if (!(this_present_mobs && that_present_mobs))
        return false;
      if (!this.mobs.equals(that.mobs))
        return false;
    }

    boolean this_present_plrs = true && this.isSetPlrs();
    boolean that_present_plrs = true && that.isSetPlrs();
    if (this_present_plrs || that_present_plrs) {
      if (!(this_present_plrs && that_present_plrs))
        return false;
      if (!this.plrs.equals(that.plrs))
        return false;
    }

    boolean this_present_objs = true && this.isSetObjs();
    boolean that_present_objs = true && that.isSetObjs();
    if (this_present_objs || that_present_objs) {
      if (!(this_present_objs && that_present_objs))
        return false;
      if (!this.objs.equals(that.objs))
        return false;
    }

    boolean this_present_exits = true && this.isSetExits();
    boolean that_present_exits = true && that.isSetExits();
    if (this_present_exits || that_present_exits) {
      if (!(this_present_exits && that_present_exits))
        return false;
      if (!this.exits.equals(that.exits))
        return false;
    }

    boolean this_present_props = true && this.isSetProps();
    boolean that_present_props = true && that.isSetProps();
    if (this_present_props || that_present_props) {
      if (!(this_present_props && that_present_props))
        return false;
      if (!this.props.equals(that.props))
        return false;
    }

    boolean this_present_flags = true && this.isSetFlags();
    boolean that_present_flags = true && that.isSetFlags();
    if (this_present_flags || that_present_flags) {
      if (!(this_present_flags && that_present_flags))
        return false;
      if (!this.flags.equals(that.flags))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(LocReadInstance other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LocReadInstance typedOther = (LocReadInstance)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobs()).compareTo(typedOther.isSetMobs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobs, typedOther.mobs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlrs()).compareTo(typedOther.isSetPlrs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlrs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plrs, typedOther.plrs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObjs()).compareTo(typedOther.isSetObjs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObjs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objs, typedOther.objs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExits()).compareTo(typedOther.isSetExits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exits, typedOther.exits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProps()).compareTo(typedOther.isSetProps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.props, typedOther.props);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlags()).compareTo(typedOther.isSetFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, typedOther.flags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LocReadInstance(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobs:");
    if (this.mobs == null) {
      sb.append("null");
    } else {
      sb.append(this.mobs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("plrs:");
    if (this.plrs == null) {
      sb.append("null");
    } else {
      sb.append(this.plrs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("objs:");
    if (this.objs == null) {
      sb.append("null");
    } else {
      sb.append(this.objs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exits:");
    if (this.exits == null) {
      sb.append("null");
    } else {
      sb.append(this.exits);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("props:");
    if (this.props == null) {
      sb.append("null");
    } else {
      sb.append(this.props);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flags:");
    if (this.flags == null) {
      sb.append("null");
    } else {
      sb.append(this.flags);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LocReadInstanceStandardSchemeFactory implements SchemeFactory {
    public LocReadInstanceStandardScheme getScheme() {
      return new LocReadInstanceStandardScheme();
    }
  }

  private static class LocReadInstanceStandardScheme extends StandardScheme<LocReadInstance> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LocReadInstance struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MOBS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set26 = iprot.readSetBegin();
                struct.mobs = new HashSet<String>(2*_set26.size);
                for (int _i27 = 0; _i27 < _set26.size; ++_i27)
                {
                  String _elem28; // required
                  _elem28 = iprot.readString();
                  struct.mobs.add(_elem28);
                }
                iprot.readSetEnd();
              }
              struct.setMobsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PLRS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set29 = iprot.readSetBegin();
                struct.plrs = new HashSet<String>(2*_set29.size);
                for (int _i30 = 0; _i30 < _set29.size; ++_i30)
                {
                  String _elem31; // required
                  _elem31 = iprot.readString();
                  struct.plrs.add(_elem31);
                }
                iprot.readSetEnd();
              }
              struct.setPlrsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OBJS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set32 = iprot.readSetBegin();
                struct.objs = new HashSet<String>(2*_set32.size);
                for (int _i33 = 0; _i33 < _set32.size; ++_i33)
                {
                  String _elem34; // required
                  _elem34 = iprot.readString();
                  struct.objs.add(_elem34);
                }
                iprot.readSetEnd();
              }
              struct.setObjsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXITS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map35 = iprot.readMapBegin();
                struct.exits = new HashMap<ExitProp,String>(2*_map35.size);
                for (int _i36 = 0; _i36 < _map35.size; ++_i36)
                {
                  ExitProp _key37; // optional
                  String _val38; // required
                  _key37 = ExitProp.findByValue(iprot.readI32());
                  _val38 = iprot.readString();
                  struct.exits.put(_key37, _val38);
                }
                iprot.readMapEnd();
              }
              struct.setExitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROPS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map39 = iprot.readMapBegin();
                struct.props = new HashMap<String,String>(2*_map39.size);
                for (int _i40 = 0; _i40 < _map39.size; ++_i40)
                {
                  String _key41; // optional
                  String _val42; // required
                  _key41 = iprot.readString();
                  _val42 = iprot.readString();
                  struct.props.put(_key41, _val42);
                }
                iprot.readMapEnd();
              }
              struct.setPropsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set43 = iprot.readSetBegin();
                struct.flags = new HashSet<String>(2*_set43.size);
                for (int _i44 = 0; _i44 < _set43.size; ++_i44)
                {
                  String _elem45; // required
                  _elem45 = iprot.readString();
                  struct.flags.add(_elem45);
                }
                iprot.readSetEnd();
              }
              struct.setFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LocReadInstance struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.mobs != null) {
        oprot.writeFieldBegin(MOBS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.mobs.size()));
          for (String _iter46 : struct.mobs)
          {
            oprot.writeString(_iter46);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.plrs != null) {
        oprot.writeFieldBegin(PLRS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.plrs.size()));
          for (String _iter47 : struct.plrs)
          {
            oprot.writeString(_iter47);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.objs != null) {
        oprot.writeFieldBegin(OBJS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.objs.size()));
          for (String _iter48 : struct.objs)
          {
            oprot.writeString(_iter48);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.exits != null) {
        oprot.writeFieldBegin(EXITS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.exits.size()));
          for (Map.Entry<ExitProp, String> _iter49 : struct.exits.entrySet())
          {
            oprot.writeI32(_iter49.getKey().getValue());
            oprot.writeString(_iter49.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.props != null) {
        oprot.writeFieldBegin(PROPS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.props.size()));
          for (Map.Entry<String, String> _iter50 : struct.props.entrySet())
          {
            oprot.writeString(_iter50.getKey());
            oprot.writeString(_iter50.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.flags != null) {
        oprot.writeFieldBegin(FLAGS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.flags.size()));
          for (String _iter51 : struct.flags)
          {
            oprot.writeString(_iter51);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LocReadInstanceTupleSchemeFactory implements SchemeFactory {
    public LocReadInstanceTupleScheme getScheme() {
      return new LocReadInstanceTupleScheme();
    }
  }

  private static class LocReadInstanceTupleScheme extends TupleScheme<LocReadInstance> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LocReadInstance struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetMobs()) {
        optionals.set(1);
      }
      if (struct.isSetPlrs()) {
        optionals.set(2);
      }
      if (struct.isSetObjs()) {
        optionals.set(3);
      }
      if (struct.isSetExits()) {
        optionals.set(4);
      }
      if (struct.isSetProps()) {
        optionals.set(5);
      }
      if (struct.isSetFlags()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetMobs()) {
        {
          oprot.writeI32(struct.mobs.size());
          for (String _iter52 : struct.mobs)
          {
            oprot.writeString(_iter52);
          }
        }
      }
      if (struct.isSetPlrs()) {
        {
          oprot.writeI32(struct.plrs.size());
          for (String _iter53 : struct.plrs)
          {
            oprot.writeString(_iter53);
          }
        }
      }
      if (struct.isSetObjs()) {
        {
          oprot.writeI32(struct.objs.size());
          for (String _iter54 : struct.objs)
          {
            oprot.writeString(_iter54);
          }
        }
      }
      if (struct.isSetExits()) {
        {
          oprot.writeI32(struct.exits.size());
          for (Map.Entry<ExitProp, String> _iter55 : struct.exits.entrySet())
          {
            oprot.writeI32(_iter55.getKey().getValue());
            oprot.writeString(_iter55.getValue());
          }
        }
      }
      if (struct.isSetProps()) {
        {
          oprot.writeI32(struct.props.size());
          for (Map.Entry<String, String> _iter56 : struct.props.entrySet())
          {
            oprot.writeString(_iter56.getKey());
            oprot.writeString(_iter56.getValue());
          }
        }
      }
      if (struct.isSetFlags()) {
        {
          oprot.writeI32(struct.flags.size());
          for (String _iter57 : struct.flags)
          {
            oprot.writeString(_iter57);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LocReadInstance struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set58 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.mobs = new HashSet<String>(2*_set58.size);
          for (int _i59 = 0; _i59 < _set58.size; ++_i59)
          {
            String _elem60; // required
            _elem60 = iprot.readString();
            struct.mobs.add(_elem60);
          }
        }
        struct.setMobsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TSet _set61 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.plrs = new HashSet<String>(2*_set61.size);
          for (int _i62 = 0; _i62 < _set61.size; ++_i62)
          {
            String _elem63; // required
            _elem63 = iprot.readString();
            struct.plrs.add(_elem63);
          }
        }
        struct.setPlrsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TSet _set64 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.objs = new HashSet<String>(2*_set64.size);
          for (int _i65 = 0; _i65 < _set64.size; ++_i65)
          {
            String _elem66; // required
            _elem66 = iprot.readString();
            struct.objs.add(_elem66);
          }
        }
        struct.setObjsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map67 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.exits = new HashMap<ExitProp,String>(2*_map67.size);
          for (int _i68 = 0; _i68 < _map67.size; ++_i68)
          {
            ExitProp _key69; // optional
            String _val70; // required
            _key69 = ExitProp.findByValue(iprot.readI32());
            _val70 = iprot.readString();
            struct.exits.put(_key69, _val70);
          }
        }
        struct.setExitsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map71 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.props = new HashMap<String,String>(2*_map71.size);
          for (int _i72 = 0; _i72 < _map71.size; ++_i72)
          {
            String _key73; // optional
            String _val74; // required
            _key73 = iprot.readString();
            _val74 = iprot.readString();
            struct.props.put(_key73, _val74);
          }
        }
        struct.setPropsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TSet _set75 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.flags = new HashSet<String>(2*_set75.size);
          for (int _i76 = 0; _i76 < _set75.size; ++_i76)
          {
            String _elem77; // required
            _elem77 = iprot.readString();
            struct.flags.add(_elem77);
          }
        }
        struct.setFlagsIsSet(true);
      }
    }
  }

}

