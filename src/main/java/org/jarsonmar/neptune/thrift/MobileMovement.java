/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.jarsonmar.neptune.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MobileMovement implements org.apache.thrift.TBase<MobileMovement, MobileMovement._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MobileMovement");

  private static final org.apache.thrift.protocol.TField MOB_FIELD_DESC = new org.apache.thrift.protocol.TField("mob", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LOC_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("locFrom", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOC_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("locTo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("direction", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MobileMovementStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MobileMovementTupleSchemeFactory());
  }

  public String mob; // required
  public String locFrom; // required
  public String locTo; // required
  /**
   * 
   * @see ExitProp
   */
  public ExitProp direction; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MOB((short)1, "mob"),
    LOC_FROM((short)2, "locFrom"),
    LOC_TO((short)3, "locTo"),
    /**
     * 
     * @see ExitProp
     */
    DIRECTION((short)4, "direction");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MOB
          return MOB;
        case 2: // LOC_FROM
          return LOC_FROM;
        case 3: // LOC_TO
          return LOC_TO;
        case 4: // DIRECTION
          return DIRECTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MOB, new org.apache.thrift.meta_data.FieldMetaData("mob", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOC_FROM, new org.apache.thrift.meta_data.FieldMetaData("locFrom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOC_TO, new org.apache.thrift.meta_data.FieldMetaData("locTo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("direction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ExitProp.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MobileMovement.class, metaDataMap);
  }

  public MobileMovement() {
  }

  public MobileMovement(
    String mob,
    String locFrom,
    String locTo,
    ExitProp direction)
  {
    this();
    this.mob = mob;
    this.locFrom = locFrom;
    this.locTo = locTo;
    this.direction = direction;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MobileMovement(MobileMovement other) {
    if (other.isSetMob()) {
      this.mob = other.mob;
    }
    if (other.isSetLocFrom()) {
      this.locFrom = other.locFrom;
    }
    if (other.isSetLocTo()) {
      this.locTo = other.locTo;
    }
    if (other.isSetDirection()) {
      this.direction = other.direction;
    }
  }

  public MobileMovement deepCopy() {
    return new MobileMovement(this);
  }

  @Override
  public void clear() {
    this.mob = null;
    this.locFrom = null;
    this.locTo = null;
    this.direction = null;
  }

  public String getMob() {
    return this.mob;
  }

  public MobileMovement setMob(String mob) {
    this.mob = mob;
    return this;
  }

  public void unsetMob() {
    this.mob = null;
  }

  /** Returns true if field mob is set (has been assigned a value) and false otherwise */
  public boolean isSetMob() {
    return this.mob != null;
  }

  public void setMobIsSet(boolean value) {
    if (!value) {
      this.mob = null;
    }
  }

  public String getLocFrom() {
    return this.locFrom;
  }

  public MobileMovement setLocFrom(String locFrom) {
    this.locFrom = locFrom;
    return this;
  }

  public void unsetLocFrom() {
    this.locFrom = null;
  }

  /** Returns true if field locFrom is set (has been assigned a value) and false otherwise */
  public boolean isSetLocFrom() {
    return this.locFrom != null;
  }

  public void setLocFromIsSet(boolean value) {
    if (!value) {
      this.locFrom = null;
    }
  }

  public String getLocTo() {
    return this.locTo;
  }

  public MobileMovement setLocTo(String locTo) {
    this.locTo = locTo;
    return this;
  }

  public void unsetLocTo() {
    this.locTo = null;
  }

  /** Returns true if field locTo is set (has been assigned a value) and false otherwise */
  public boolean isSetLocTo() {
    return this.locTo != null;
  }

  public void setLocToIsSet(boolean value) {
    if (!value) {
      this.locTo = null;
    }
  }

  /**
   * 
   * @see ExitProp
   */
  public ExitProp getDirection() {
    return this.direction;
  }

  /**
   * 
   * @see ExitProp
   */
  public MobileMovement setDirection(ExitProp direction) {
    this.direction = direction;
    return this;
  }

  public void unsetDirection() {
    this.direction = null;
  }

  /** Returns true if field direction is set (has been assigned a value) and false otherwise */
  public boolean isSetDirection() {
    return this.direction != null;
  }

  public void setDirectionIsSet(boolean value) {
    if (!value) {
      this.direction = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MOB:
      if (value == null) {
        unsetMob();
      } else {
        setMob((String)value);
      }
      break;

    case LOC_FROM:
      if (value == null) {
        unsetLocFrom();
      } else {
        setLocFrom((String)value);
      }
      break;

    case LOC_TO:
      if (value == null) {
        unsetLocTo();
      } else {
        setLocTo((String)value);
      }
      break;

    case DIRECTION:
      if (value == null) {
        unsetDirection();
      } else {
        setDirection((ExitProp)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MOB:
      return getMob();

    case LOC_FROM:
      return getLocFrom();

    case LOC_TO:
      return getLocTo();

    case DIRECTION:
      return getDirection();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MOB:
      return isSetMob();
    case LOC_FROM:
      return isSetLocFrom();
    case LOC_TO:
      return isSetLocTo();
    case DIRECTION:
      return isSetDirection();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MobileMovement)
      return this.equals((MobileMovement)that);
    return false;
  }

  public boolean equals(MobileMovement that) {
    if (that == null)
      return false;

    boolean this_present_mob = true && this.isSetMob();
    boolean that_present_mob = true && that.isSetMob();
    if (this_present_mob || that_present_mob) {
      if (!(this_present_mob && that_present_mob))
        return false;
      if (!this.mob.equals(that.mob))
        return false;
    }

    boolean this_present_locFrom = true && this.isSetLocFrom();
    boolean that_present_locFrom = true && that.isSetLocFrom();
    if (this_present_locFrom || that_present_locFrom) {
      if (!(this_present_locFrom && that_present_locFrom))
        return false;
      if (!this.locFrom.equals(that.locFrom))
        return false;
    }

    boolean this_present_locTo = true && this.isSetLocTo();
    boolean that_present_locTo = true && that.isSetLocTo();
    if (this_present_locTo || that_present_locTo) {
      if (!(this_present_locTo && that_present_locTo))
        return false;
      if (!this.locTo.equals(that.locTo))
        return false;
    }

    boolean this_present_direction = true && this.isSetDirection();
    boolean that_present_direction = true && that.isSetDirection();
    if (this_present_direction || that_present_direction) {
      if (!(this_present_direction && that_present_direction))
        return false;
      if (!this.direction.equals(that.direction))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(MobileMovement other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MobileMovement typedOther = (MobileMovement)other;

    lastComparison = Boolean.valueOf(isSetMob()).compareTo(typedOther.isSetMob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mob, typedOther.mob);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocFrom()).compareTo(typedOther.isSetLocFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locFrom, typedOther.locFrom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocTo()).compareTo(typedOther.isSetLocTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locTo, typedOther.locTo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDirection()).compareTo(typedOther.isSetDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direction, typedOther.direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MobileMovement(");
    boolean first = true;

    sb.append("mob:");
    if (this.mob == null) {
      sb.append("null");
    } else {
      sb.append(this.mob);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("locFrom:");
    if (this.locFrom == null) {
      sb.append("null");
    } else {
      sb.append(this.locFrom);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("locTo:");
    if (this.locTo == null) {
      sb.append("null");
    } else {
      sb.append(this.locTo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("direction:");
    if (this.direction == null) {
      sb.append("null");
    } else {
      sb.append(this.direction);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MobileMovementStandardSchemeFactory implements SchemeFactory {
    public MobileMovementStandardScheme getScheme() {
      return new MobileMovementStandardScheme();
    }
  }

  private static class MobileMovementStandardScheme extends StandardScheme<MobileMovement> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MobileMovement struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MOB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mob = iprot.readString();
              struct.setMobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOC_FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.locFrom = iprot.readString();
              struct.setLocFromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOC_TO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.locTo = iprot.readString();
              struct.setLocToIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.direction = ExitProp.findByValue(iprot.readI32());
              struct.setDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MobileMovement struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mob != null) {
        oprot.writeFieldBegin(MOB_FIELD_DESC);
        oprot.writeString(struct.mob);
        oprot.writeFieldEnd();
      }
      if (struct.locFrom != null) {
        oprot.writeFieldBegin(LOC_FROM_FIELD_DESC);
        oprot.writeString(struct.locFrom);
        oprot.writeFieldEnd();
      }
      if (struct.locTo != null) {
        oprot.writeFieldBegin(LOC_TO_FIELD_DESC);
        oprot.writeString(struct.locTo);
        oprot.writeFieldEnd();
      }
      if (struct.direction != null) {
        oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
        oprot.writeI32(struct.direction.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MobileMovementTupleSchemeFactory implements SchemeFactory {
    public MobileMovementTupleScheme getScheme() {
      return new MobileMovementTupleScheme();
    }
  }

  private static class MobileMovementTupleScheme extends TupleScheme<MobileMovement> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MobileMovement struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMob()) {
        optionals.set(0);
      }
      if (struct.isSetLocFrom()) {
        optionals.set(1);
      }
      if (struct.isSetLocTo()) {
        optionals.set(2);
      }
      if (struct.isSetDirection()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetMob()) {
        oprot.writeString(struct.mob);
      }
      if (struct.isSetLocFrom()) {
        oprot.writeString(struct.locFrom);
      }
      if (struct.isSetLocTo()) {
        oprot.writeString(struct.locTo);
      }
      if (struct.isSetDirection()) {
        oprot.writeI32(struct.direction.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MobileMovement struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.mob = iprot.readString();
        struct.setMobIsSet(true);
      }
      if (incoming.get(1)) {
        struct.locFrom = iprot.readString();
        struct.setLocFromIsSet(true);
      }
      if (incoming.get(2)) {
        struct.locTo = iprot.readString();
        struct.setLocToIsSet(true);
      }
      if (incoming.get(3)) {
        struct.direction = ExitProp.findByValue(iprot.readI32());
        struct.setDirectionIsSet(true);
      }
    }
  }

}

