/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.jarsonmar.neptune.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LocReadResponse implements org.apache.thrift.TBase<LocReadResponse, LocReadResponse._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LocReadResponse");

  private static final org.apache.thrift.protocol.TField LOCS_FIELD_DESC = new org.apache.thrift.protocol.TField("locs", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LocReadResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LocReadResponseTupleSchemeFactory());
  }

  public Map<String,LocReadInstance> locs; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOCS((short)1, "locs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOCS
          return LOCS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOCS, new org.apache.thrift.meta_data.FieldMetaData("locs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LocReadInstance.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LocReadResponse.class, metaDataMap);
  }

  public LocReadResponse() {
  }

  public LocReadResponse(
    Map<String,LocReadInstance> locs)
  {
    this();
    this.locs = locs;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LocReadResponse(LocReadResponse other) {
    if (other.isSetLocs()) {
      Map<String,LocReadInstance> __this__locs = new HashMap<String,LocReadInstance>();
      for (Map.Entry<String, LocReadInstance> other_element : other.locs.entrySet()) {

        String other_element_key = other_element.getKey();
        LocReadInstance other_element_value = other_element.getValue();

        String __this__locs_copy_key = other_element_key;

        LocReadInstance __this__locs_copy_value = new LocReadInstance(other_element_value);

        __this__locs.put(__this__locs_copy_key, __this__locs_copy_value);
      }
      this.locs = __this__locs;
    }
  }

  public LocReadResponse deepCopy() {
    return new LocReadResponse(this);
  }

  @Override
  public void clear() {
    this.locs = null;
  }

  public int getLocsSize() {
    return (this.locs == null) ? 0 : this.locs.size();
  }

  public void putToLocs(String key, LocReadInstance val) {
    if (this.locs == null) {
      this.locs = new HashMap<String,LocReadInstance>();
    }
    this.locs.put(key, val);
  }

  public Map<String,LocReadInstance> getLocs() {
    return this.locs;
  }

  public LocReadResponse setLocs(Map<String,LocReadInstance> locs) {
    this.locs = locs;
    return this;
  }

  public void unsetLocs() {
    this.locs = null;
  }

  /** Returns true if field locs is set (has been assigned a value) and false otherwise */
  public boolean isSetLocs() {
    return this.locs != null;
  }

  public void setLocsIsSet(boolean value) {
    if (!value) {
      this.locs = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOCS:
      if (value == null) {
        unsetLocs();
      } else {
        setLocs((Map<String,LocReadInstance>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOCS:
      return getLocs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOCS:
      return isSetLocs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LocReadResponse)
      return this.equals((LocReadResponse)that);
    return false;
  }

  public boolean equals(LocReadResponse that) {
    if (that == null)
      return false;

    boolean this_present_locs = true && this.isSetLocs();
    boolean that_present_locs = true && that.isSetLocs();
    if (this_present_locs || that_present_locs) {
      if (!(this_present_locs && that_present_locs))
        return false;
      if (!this.locs.equals(that.locs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(LocReadResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LocReadResponse typedOther = (LocReadResponse)other;

    lastComparison = Boolean.valueOf(isSetLocs()).compareTo(typedOther.isSetLocs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locs, typedOther.locs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LocReadResponse(");
    boolean first = true;

    sb.append("locs:");
    if (this.locs == null) {
      sb.append("null");
    } else {
      sb.append(this.locs);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LocReadResponseStandardSchemeFactory implements SchemeFactory {
    public LocReadResponseStandardScheme getScheme() {
      return new LocReadResponseStandardScheme();
    }
  }

  private static class LocReadResponseStandardScheme extends StandardScheme<LocReadResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LocReadResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOCS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map78 = iprot.readMapBegin();
                struct.locs = new HashMap<String,LocReadInstance>(2*_map78.size);
                for (int _i79 = 0; _i79 < _map78.size; ++_i79)
                {
                  String _key80; // optional
                  LocReadInstance _val81; // required
                  _key80 = iprot.readString();
                  _val81 = new LocReadInstance();
                  _val81.read(iprot);
                  struct.locs.put(_key80, _val81);
                }
                iprot.readMapEnd();
              }
              struct.setLocsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LocReadResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.locs != null) {
        oprot.writeFieldBegin(LOCS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.locs.size()));
          for (Map.Entry<String, LocReadInstance> _iter82 : struct.locs.entrySet())
          {
            oprot.writeString(_iter82.getKey());
            _iter82.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LocReadResponseTupleSchemeFactory implements SchemeFactory {
    public LocReadResponseTupleScheme getScheme() {
      return new LocReadResponseTupleScheme();
    }
  }

  private static class LocReadResponseTupleScheme extends TupleScheme<LocReadResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LocReadResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLocs()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetLocs()) {
        {
          oprot.writeI32(struct.locs.size());
          for (Map.Entry<String, LocReadInstance> _iter83 : struct.locs.entrySet())
          {
            oprot.writeString(_iter83.getKey());
            _iter83.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LocReadResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map84 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.locs = new HashMap<String,LocReadInstance>(2*_map84.size);
          for (int _i85 = 0; _i85 < _map84.size; ++_i85)
          {
            String _key86; // optional
            LocReadInstance _val87; // required
            _key86 = iprot.readString();
            _val87 = new LocReadInstance();
            _val87.read(iprot);
            struct.locs.put(_key86, _val87);
          }
        }
        struct.setLocsIsSet(true);
      }
    }
  }

}

